
using UnityEngine;

//変数の受け渡しやプレイヤーの状態を管理
public class reference : MonoBehaviour
{
    //プレイヤーのアニメーター
    Animator _animator;

    //プレイヤーの状態を数値で管理
    //敵のスクリプトで使用
    public int _steps = 0;

    //プレイヤーのコントロールのスクリプト
    OVRPlayerController playerController;

    //当たっているRayCastの数
    public int _shadowCheck = 0;
    //RayCastでは判定が取れない動かない大きい影の上かの判定
    public bool _isBigShadow = false;

    //プレイヤーのライフ
    public int _playerLife = 3;

    //鍵を持っているか
    public bool _isItem = false;
    //クリア条件のものを持っているか
    public bool _isTarget = false;

    //メインカメラを所得
    [SerializeField]
    private GameObject _centerCamera;

    //プレイヤーが後ろに下がりすぎた際に画面の前に出す黒いオブジェクト
    [SerializeField]
    private GameObject _back;

    //足音の間隔
    [SerializeField]
    private float _seSec = 0;
    //足音を番号
    [SerializeField]
    private int _seNumber = 0;
    //足音のSEを配列に
    [SerializeField]
    private AudioClip[] _stepSEs;
    //どのAudioSourceで鳴らすのかの指定
    [SerializeField]
    private AudioSource _audioSource;

    //カメラが壁にめり込んでいないか
    public bool _isBlackout = false;
    //めり込んだ状態から出て_backを消すかの判定
    public bool _isBlack = false;

    void Awake()
    {
        //プレイヤーを取得する
        GameObject player = GameObject.Find("Player");
        //プレイヤーのコントロールのスクリプトを取得
        playerController = player.GetComponent<OVRPlayerController>();
        //プレイヤーのAnimatorを取得する
        _animator = GetComponent<Animator>();
    }

    void Update()
    {
        //カメラが後ろに下がりすぎていないか、壁にめり込んでいないか
        if (_centerCamera.transform.localPosition.z >= 0.4f || _isBlackout)
        {
            //黒いオブジェクトを表示させプレイヤーに元の位置に戻るように促す
            _back.SetActive(true);
            //_backを表示しているためtrue
            _isBlack = true;
        }
        //カメラの位置が正常で壁にめり込んでおらず、_isBlackがtrue（_backが表示されている）場合
        else if ((_centerCamera.transform.localPosition.z < 0.4f || _isBlackout == false) && _isBlack)
        {
            //_backを表示させない
            _back.SetActive(false);
            //表示されていないことを表すためfalse
            _isBlack = false;
        }

        //seの間隔を開けるために時間を取得
        _seSec += Time.deltaTime;

        //seが配列の最後になった場合は０に戻す
        if (_seNumber >= 4)
        {
            _seNumber = 0;
        }

        //プレイヤーのライフが０になったか
        if (_playerLife <= 0)
        {
            //ゲームオーバーのアニメーションを流す
            _animator.enabled = true;
            _animator.SetBool("over", true);
        }
        //影の判定のRayCastに当たっているか影の判定内にいるか
        if ((_shadowCheck > 0) || (_isBigShadow))
        {
            //影の判定がとれている場合は影の判定の_isInsideCheckをtrueにする
            playerController._isInsideCheck = true;
        }
        else if ((_shadowCheck <= 0) || (_isBigShadow == false))
        {
            //影の判定が取れなかった場合はfalseにする
            playerController._isInsideCheck = false;
        }

        //コントローラーの傾きを取得する
        Vector2 primaryAxis = OVRInput.Get(OVRInput.Axis2D.PrimaryThumbstick);

        //コントローラーの傾きがほとんどない、またはプレイヤーが影に入っている
        if ((primaryAxis.x <= 0.1 && primaryAxis.x >= -0.1) && (primaryAxis.y <= 0.1 && primaryAxis.y >= -0.1) || playerController._isShadow == false)
        {
            //敵がプレイヤーに反応するかどうかの判定に使われる
            //0は敵の判定が小さく、数値が上がるにつれて気づかれやすくなる
            _steps = 0;
        }
        //コントローラーの傾きが少し、またはしゃがんで移動している
        else if ((((primaryAxis.x >= 0.2 && primaryAxis.x <= 0.3) || (primaryAxis.y >= 0.2 && primaryAxis.y <= 0.3)) ||
                   ((primaryAxis.x <= -0.2 && primaryAxis.x >= -0.3) || (primaryAxis.y <= -0.2 && primaryAxis.y >= -0.3))) ||
                 playerController._isCrouch == false)
        {
            //間隔をあけて足音を鳴らす
            if (_seSec >= 0.8)
            {
                //足音の大きさを小さくする
                _audioSource.volume = 0.3f;
                //配列に入っている音を鳴らす
                _audioSource.PlayOneShot(_stepSEs[_seNumber]);
                //配列のインデックスを一つ進める
                _seNumber++;
                //音の間隔をあけるためにリセット
                _seSec = 0;
            }
            _steps = 1;
        }
        //コントローラーがマックスより少なめに傾いている
        else if (((primaryAxis.x >= 0.4 && primaryAxis.x <= 0.6) || (primaryAxis.y >= 0.4 && primaryAxis.y <= 0.6)) ||
                  ((primaryAxis.x <= -0.4 && primaryAxis.x >= -0.6) || (primaryAxis.y <= -0.4 && primaryAxis.y >= -0.6)))
        {
            //間隔をあけて足音を鳴らす
            if (_seSec >= 0.5)
            {
                //足音を大きめにする
                _audioSource.volume = 0.7f;
                //配列に入っている音を鳴らす
                _audioSource.PlayOneShot(_stepSEs[_seNumber]);
                //配列のインデックスを一つ進める
                _seNumber++;
                //音の間隔をあけるためにリセット
                _seSec = 0;
            }
            _steps = 2;
        }
        //コントローラーがほとんどマックスに傾いている
        else if ((primaryAxis.x >= 0.7 || primaryAxis.y >= 0.7) || (primaryAxis.x <= -0.7 || primaryAxis.y <= -0.7))
        {
            //間隔を小さくして足音を鳴らす
            if (_seSec >= 0.3)
            {
                //足音の音量をMaxにする
                _audioSource.volume = 1f;
                //配列に入っている音を鳴らす
                _audioSource.PlayOneShot(_stepSEs[_seNumber]);
                //配列のインデックスを進める
                _seNumber++;
                //音の間隔をあけるためにリセット
                _seSec = 0;
            }
            //_stepは３が一番敵に気づかれやすい
            _steps = 3;
        }
    }
}

