using UnityEngine;
using System.Collections;

public class shadow_ch : MonoBehaviour
{
	//一番近いlightを取得
	[SerializeField]
	private GameObject _light;

	//reference.csに影に入れるかどうかを引き渡すか
	private bool _isInShadow = false;
	//影のできる範囲
	private float _lightVolume = 10f;
	//オブジェクトにRayCastが当たらないように少しずらす
	private float _adjust = 0.08f;

	//RayCastを出す場所の計算に使用
	float _scaleX;
	float _scaleY;
	float _scaleZ;


	//変数を渡したり、プレイヤーの位置を取得したりするためのプレイヤーとプレイヤーのスクリプトを宣言
	OVRPlayerController _playerController;
	reference _reference;
	GameObject _player;


	void Awake()
	{
		//プレイヤーとプレイヤーのスクリプトを取得
		_player = GameObject.Find("Player");
		_playerController = _player.GetComponent<OVRPlayerController>();
		_reference = _player.GetComponent<reference>();

		//オブジェクトの端を取得したいのでxyzの数値を半分にする
		_scaleX = transform.localScale.x / 2f;
		_scaleY = transform.localScale.y / 2f;
		_scaleZ = transform.localScale.z / 2f;
	}

	void Update()
	{
		//プレイヤーが影ができる範囲内に入っているか
		if ((this.transform.position.x - _lightVolume < _player.transform.position.x && _player.transform.position.x < this.transform.position.x + _lightVolume) &&
		   (this.transform.position.z - _lightVolume < _player.transform.position.z && _player.transform.position.z < this.transform.position.z + _lightVolume))
		{
			Ray();
		}
	}


	void Ray()
	{

		//オブジェクトの上の四つ角と、角と過度の中点の八か所の座標を計算する
		//RayCastを出す場所になるがこのままだとRayCastが自身にぶつかってしまうので、_adjustを使用し当たらないようにする
		Vector3 origin_1 = new Vector3(transform.position.x - _scaleX - _adjust, transform.position.y + _scaleY, transform.position.z - _scaleZ + _adjust);
		Vector3 origin_2 = new Vector3(transform.position.x + _scaleX + _adjust, transform.position.y + _scaleY, transform.position.z - _scaleZ + _adjust);
		Vector3 origin_3 = new Vector3(transform.position.x - _scaleX - _adjust, transform.position.y + _scaleY, transform.position.z + _scaleZ - _adjust);
		Vector3 origin_4 = new Vector3(transform.position.x + _scaleX + _adjust, transform.position.y + _scaleY, transform.position.z + _scaleZ - _adjust);
		Vector3 origin_5 = new Vector3(transform.position.x + _scaleX + _adjust, transform.position.y + _scaleY, transform.position.z);
		Vector3 origin_6 = new Vector3(transform.position.x - _scaleX - _adjust, transform.position.y + _scaleY, transform.position.z);
		Vector3 origin_7 = new Vector3(transform.position.x, transform.position.y + _scaleY, transform.position.z + _scaleZ - _adjust);
		Vector3 origin_8 = new Vector3(transform.position.x, transform.position.y + _scaleY, transform.position.z - _scaleZ + _adjust);

		//求めた点から一番近いlightオブジェクトとの逆方向にRayCastを飛ばす
		Vector3 direction_1 = new Vector3(transform.position.x - _scaleX - _adjust - _light.transform.position.x, transform.position.y + _scaleY - _light.transform.position.y, transform.position.z - _scaleZ + _adjust - _light.transform.position.z);
		Ray ray_1 = new Ray(origin_1, direction_1);
		RaycastHit hit_1;
		Physics.Raycast(ray_1, out hit_1);
		Debug.DrawRay(origin_1, direction_1 * 10, Color.blue, 5.0f);

		Vector3 direction_2 = new Vector3(transform.position.x + _scaleX + _adjust - _light.transform.position.x, transform.position.y + _scaleY - _light.transform.position.y, transform.position.z - _scaleZ + _adjust - _light.transform.position.z);
		Ray ray_2 = new Ray(origin_2, direction_2);
		RaycastHit hit_2;
		Physics.Raycast(ray_2, out hit_2);
		Debug.DrawRay(origin_2, direction_2 * 10, Color.blue, 5.0f);

		Vector3 direction_3 = new Vector3(transform.position.x - _scaleX - _adjust - _light.transform.position.x, transform.position.y + _scaleY - _light.transform.position.y, transform.position.z + _scaleZ - _adjust - _light.transform.position.z);
		Ray ray_3 = new Ray(origin_3, direction_3);
		RaycastHit hit_3;
		Physics.Raycast(ray_3, out hit_3);
		Debug.DrawRay(origin_3, direction_3 * 10, Color.blue, 5.0f);

		Vector3 direction_4 = new Vector3(transform.position.x + _scaleX + _adjust - _light.transform.position.x, transform.position.y + _scaleY - _light.transform.position.y, transform.position.z + _scaleZ - _adjust - _light.transform.position.z);
		Ray ray_4 = new Ray(origin_4, direction_4);
		RaycastHit hit_4;
		Physics.Raycast(ray_4, out hit_4);
		Debug.DrawRay(origin_4, direction_4 * 10, Color.blue, 5.0f);

		Vector3 direction_5 = new Vector3(transform.position.x + _scaleX + _adjust - _light.transform.position.x, transform.position.y + _scaleY - _light.transform.position.y, transform.position.z - _light.transform.position.z);
		Ray ray_5 = new Ray(origin_5, direction_5);
		RaycastHit hit_5;
		Physics.Raycast(ray_5, out hit_5);
		Debug.DrawRay(origin_5, direction_5 * 10, Color.blue, 5.0f);

		Vector3 direction_6 = new Vector3(transform.position.x - _scaleX - _adjust - _light.transform.position.x, transform.position.y + _scaleY - _light.transform.position.y, transform.position.z - _light.transform.position.z);
		Ray ray_6 = new Ray(origin_6, direction_6);
		RaycastHit hit_6;
		Physics.Raycast(ray_6, out hit_6);
		Debug.DrawRay(origin_6, direction_6 * 10, Color.blue, 5.0f);

		Vector3 direction_7 = new Vector3(transform.position.x  - _light.transform.position.x, transform.position.y + _scaleY - _light.transform.position.y, transform.position.z + _scaleZ + _adjust - _light.transform.position.z);
		Ray ray_7 = new Ray(origin_7, direction_7);
		RaycastHit hit_7;
		Physics.Raycast(ray_7, out hit_7);
		Debug.DrawRay(origin_7, direction_7 * 10, Color.blue, 5.0f);

		Vector3 direction_8 = new Vector3(transform.position.x - _light.transform.position.x, transform.position.y + _scaleY - _light.transform.position.y, transform.position.z - _scaleZ + _adjust - _light.transform.position.z);
		Ray ray_8 = new Ray(origin_8, direction_8);
		RaycastHit hit_8;
		Physics.Raycast(ray_8, out hit_8);
		Debug.DrawRay(origin_8, direction_8 * 10, Color.blue, 5.0f);

		//どれか一本でもRayCastがプレイヤーに当たった場合
		if (hit_1.transform.CompareTag("Player") || hit_2.transform.CompareTag("Player") || hit_3.transform.CompareTag("Player") || hit_4.transform.CompareTag("Player") ||
			hit_5.transform.CompareTag("Player") || hit_6.transform.CompareTag("Player") || hit_7.transform.CompareTag("Player") || hit_8.transform.CompareTag("Player") ||
			hit_1.transform.CompareTag("Shadow") || hit_2.transform.CompareTag("Shadow") || hit_3.transform.CompareTag("Shadow") || hit_4.transform.CompareTag("Shadow") ||
			hit_5.transform.CompareTag("Shadow") || hit_6.transform.CompareTag("Shadow") || hit_7.transform.CompareTag("Shadow") || hit_8.transform.CompareTag("Shadow"))
		{
			//ぶつかっている間一度だけ
			if (_isInShadow ==false)
            {
				//_referenceで_shadowCheckが1以上の場合影に入れる判定になるので1を足す
				_reference._shadowCheck++;
				//一度足したらtureにする
				_isInShadow = true;
			}
		}
		else
		{
			//RayCastにプレイヤーがぶつかっていたがぶつからなくなった場合
			if (_isInShadow == true)
			{
				//再度RayCastに当たった際に判定を取り直すためにfalseにする
				_isInShadow = false;
				//一度1を足しているので１を引く
				//ほかのオブジェクトの影には入っている可能性があるので0指定はしない
				_reference._shadowCheck--;
			}
		}
	}
}